{"version":3,"sources":["00_config.js","00_loaders.js","01_EventoDummy.js","AEngine.js","AJugador.js","Cohete.js","JugadorLocal.js","JugadorRemoto.js","ResultadoOpe.js","Submarino.js","z_app.js","01EtapaSelPos/DrawSelPos.js","01EtapaSelPos/EngineSelPos.js","02EtapaEsperarBatalla/DrawEsperar.js","02EtapaEsperarBatalla/EngineEsperar.js","03EtapaBatalla/DrawBatallaAllRegions.js","03EtapaBatalla/DrawBatallaAtaque.js","03EtapaBatalla/DrawBatallaSubmarinosLocal.js","03EtapaBatalla/EngineBatalla.js","MensajeSocket/01_configMensaje.js","MensajeSocket/factoryMensajeSocket.js","MensajeSocket/proRecibirMsgSocket.js","Posicion/Posicion.js","Posicion/PosicionRC.js","Posicion/PosicionRCCuadrante.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrdfile":"app.js","sourcesContent":["/* @flow */\r\n\r\nconst gameConfig = {\r\n    size: 700,\r\n    deltaSep: 20,\r\n    numSubmarinos: 8,\r\n    numDivisiones: 6,\r\n    wDivision: 2,\r\n    msPrepararCohete:6000,\r\n    velocidadCohete:10,\r\n    resources: {\r\n        imgMar: null,\r\n        imgBullet:null ,\r\n        imgTanque:null,\r\n        imgTanqueDest:null,\r\n        imgRocket:null,\r\n        imgExplosion:null\r\n    }\r\n};\r\n\r\nconst gameEstado = {\r\n    ConfirmarPosicion: 'ConfirmarPosicion',\r\n    EsperarParticipantes: 'EsperarParticipantes',\r\n    Batalla: 'Batalla',\r\n    TerminoBatalla: 'TerminoBatalla'\r\n};\r\n\r\nconst gameCacheSize = {\r\n    sizeRegion: null,\r\n    getSizeRegion: function () {\r\n        if (this.sizeRegion !== null) {\r\n            return this.sizeRegion;\r\n        }\r\n\r\n        this.sizeRegion = gameConfig.size / 3;\r\n        return this.sizeRegion;\r\n    },\r\n\r\n    sizeMar: null,\r\n    getSizeMar: function () {\r\n        if (this.sizeMar !== null) {\r\n            return this.sizeMar;\r\n        }\r\n        const delta = gameConfig.deltaSep;\r\n        this.sizeMar = this.getSizeRegion() - 2 * delta;\r\n        return this.sizeMar;\r\n    },\r\n    sizeCM: null,\r\n    getSizeCM: function () {\r\n\r\n        if (this.sizeCM !== null) {\r\n            return this.sizeCM;\r\n        }\r\n\r\n        const s = this.getSizeMar();\r\n        const w = gameConfig.wDivision;\r\n\r\n        this.sizeCM = (s - (gameConfig.numDivisiones - 1) * w) / gameConfig.numDivisiones;\r\n        return this.sizeCM;\r\n    }\r\n};\r\n\r\n\r\nfunction IDGenerator() {\r\n\r\n    let length = 8;\r\n    let timestamp = new Date;\r\n\r\n    let _getRandomInt = function (min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n\r\n    let ts = timestamp.toString();\r\n    let parts = ts.split(\"\").reverse();\r\n    let id = \"\";\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n        let index = _getRandomInt(0, parts.length - 1);\r\n        id += parts[index];\r\n    }\r\n\r\n    return id;\r\n}\r\n\r\n\r\n","\r\nfunction loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image();\r\n        image.addEventListener('load', () => {\r\n            resolve(image)\r\n        });\r\n\r\n        image.src = url;\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nfunction loadCanvasAndResources(callback){\r\n\r\n    /* registrar canvas */\r\n    if(!gameData.isCanvasLoaded){\r\n\r\n        gameData.canvas = document.createElement('canvas');\r\n        gameData.canvas.width = gameConfig.size;\r\n        gameData.canvas.height = gameConfig.size;\r\n\r\n        let container = document.getElementById('container');\r\n        container.append(gameData.canvas);\r\n        gameData.ctx = gameData.canvas.getContext('2d');\r\n\r\n        gameData.isCanvasLoaded=true;\r\n    }\r\n\r\n    /* precargar archivos *************************** */\r\n\r\n\r\n    function loadMar(){\r\n        return loadImage('/img/mar1.png')\r\n    }\r\n\r\n    function loadBullet(){\r\n        return loadImage( '/img/Bullet.png');\r\n    }\r\n\r\n    function loadTanque(){\r\n        return loadImage( '/img/tanque.png');\r\n    }\r\n\r\n    function loadTanqueDestruido(){\r\n        return loadImage( '/img/tanque_destruido.png');\r\n    }\r\n\r\n    function loadRocket(){\r\n        return loadImage( '/img/Rocket.png');\r\n    }\r\n\r\n    function loadExplosion(){\r\n        return loadImage( '/img/Explosion.png');\r\n    }\r\n\r\n    Promise.all([\r\n            loadMar(),loadBullet(), loadTanque(),\r\n            loadTanqueDestruido(), loadRocket(),loadExplosion()\r\n        ]\r\n    ).then(([imgMar, imgBullet, imgTanque,\r\n                           imgTanqueDest, imgRocket, imgExplosion]) => {\r\n        callback(imgMar, imgBullet, imgTanque\r\n            , imgTanqueDest, imgRocket, imgExplosion);\r\n        gameConfig.isResourcesLoaded = true;\r\n    });\r\n\r\n}","//@flow\r\n\r\nlet EventoDummy = {\r\n\r\n    token: '*token*',\r\n\r\n    iniciar2Jugadores: function () {\r\n\r\n\r\n        let msg = {\r\n            id_jugador: 2000,\r\n            token: this.token\r\n        };\r\n\r\n        let jugador2 = factoryJugadorRemoto.fromMsgJugadorIngresa(msg);\r\n        gameData.listaJugadores.push(jugador2);\r\n\r\n        gameController.onRegistroSocket(this.token);\r\n\r\n    },\r\n    confirmaJugadorRemoto: function () {\r\n\r\n        //el jugador que tenemos envia mensjae de confirmarciopn\r\n        let j = gameData.listaJugadores\r\n            .find(\r\n                item => {\r\n                    return !item.isPosicionConfirmada\r\n                }\r\n            )\r\n        ;\r\n\r\n        let msg = factoryMensajeSocket.JugadorConfirma(this.token, j.id);\r\n\r\n\r\n        gameController.onRecibirMensajeSocket(msg);\r\n    }\r\n    ,\r\n    iniciar2JugadoresyConfirmar: function () {\r\n\r\n        this.iniciar2Jugadores();\r\n        this.confirmaJugadorRemoto();\r\n        // //confirma jugador local\r\n         let fn = () => {\r\n             gameController.engine.selpos.onKeyDow({code: \"Enter\"});\r\n         };\r\n         setTimeout(fn, 1000);\r\n\r\n    },\r\n\r\n    iniciar3Jugadores: function () {\r\n        this.iniciar2Jugadores();\r\n\r\n\r\n        let msg = {\r\n            id_jugador: 3000,\r\n            token: this.token\r\n        };\r\n\r\n        let jugador3 = factoryJugadorRemoto.fromMsgJugadorIngresa(msg);\r\n        gameData.listaJugadores.push(jugador3);\r\n    }\r\n};","// @flow\r\n\r\nclass AEngine {\r\n\r\n    constructor(fnOnContinuar){\r\n\r\n        this.fnOnContinuar = fnOnContinuar;\r\n\r\n        this.isRunning = null;\r\n        this.canvas = gameData.canvas;\r\n        this.ctx = gameData.ctx;\r\n        this.tokenRoom = gameData.tokenRoom;\r\n        this.jugadorLocal = gameData.jugadorLocal;\r\n\r\n        this.mouseEstatus = null;\r\n    }\r\n\r\n    removeEventosMouseAndKeyBoard() {\r\n        let canvas = gameData.canvas;\r\n\r\n        canvas.onmousedown = (event) => {\r\n            // console.log('no listenging');\r\n        };\r\n\r\n        canvas.onmouseup = (event) => {\r\n            // console.log('no listenging');\r\n        };\r\n\r\n        canvas.onmousemove = (event) => {\r\n            // console.log('no listenging');\r\n        };\r\n\r\n        document.onkeydown = (event) => {\r\n            // console.log('no listenging');\r\n        };\r\n    }\r\n\r\n\r\n\r\n}","/* @flow*/\r\nclass AJugador {\r\n\r\n    constructor(indexCuadrante) {\r\n        this.indexCuadrante = indexCuadrante;\r\n        this.id = parseInt(Math.random() * 100000);\r\n        this.isPosicionConfirmada = false;\r\n\r\n        this.getIsLocal = () => {\r\n            return indexCuadrante === 0;\r\n        };\r\n\r\n        this.listaAtaquesRecibidos = [];\r\n        this.listaCohetes = [];\r\n\r\n    }\r\n\r\n\r\n    setPosicionConfirmada() {\r\n        this.isPosicionConfirmada = true;\r\n    }\r\n\r\n    getListaCohetes(): Array<Cohete> {\r\n        return this.listaCohetes;\r\n    }\r\n\r\n    getOrigenFromIndex(): Posicion {\r\n       return factoryPosicionRCCuadrante.getOrigenCuadrante(this.indexCuadrante);\r\n    }\r\n}","class Cohete {\r\n\r\n    constructor(posicionIni, jugador: AJugador) {\r\n        this.id = IDGenerator();\r\n\r\n        this.posicionIni = posicionIni;\r\n        this.estado = 'ready';\r\n        this.velocidad = new Posicion(0, 0, 0);\r\n        this.posicion = null;\r\n        this.jugador = jugador;\r\n    }\r\n\r\n    getIsEstadoReady() {\r\n        return this.estado === 'ready';\r\n    }\r\n\r\n    getIsEstadoLanzado() {\r\n        return this.estado === 'lanzado';\r\n    }\r\n\r\n    lanzar(posicionFinalRC, posicionFinal) {\r\n        this.estado = 'lanzado';\r\n        this.posicionFinal = posicionFinal;\r\n        this.posicionFinalRC = posicionFinalRC;\r\n    }\r\n\r\n    mover() {\r\n\r\n    }\r\n\r\n}\r\n\r\nconst factoryCohete = {\r\n    jugadorLocal: function (submarino: Submarino) {\r\n\r\n        //let posicion= submarino.\r\n\r\n        let jugador = gameData.jugadorLocal;\r\n\r\n        let origen = jugador.getOrigenFromIndex();\r\n        let posRel = submarino.getPosicionXYRel();\r\n\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n\r\n        let x = origen.x + posRel.x + sizeCM / 2;\r\n        let y = origen.y + posRel.y + sizeCM / 2;\r\n\r\n        let posicionCentroCohete=new Posicion(x,y);\r\n\r\n\r\n        return new Cohete( posicionCentroCohete, jugador);\r\n\r\n\r\n    }\r\n};\r\n\r\n","/* @flow */\r\nclass JugadorLocal extends AJugador {\r\n\r\n    constructor(listaSubmarinos) {\r\n        super(0);\r\n\r\n        this.listaSubmarinos = listaSubmarinos;\r\n\r\n        //asignar los submarinos al jugador actual\r\n        this.listaSubmarinos\r\n            .forEach(submarino => {\r\n                submarino.setJugador(this);\r\n            })\r\n        ;\r\n\r\n\r\n    }\r\n\r\n    getListaSubmarinos() {\r\n        return this.listaSubmarinos;\r\n    }\r\n\r\n    prepararCohetes(): void {\r\n        this.listaSubmarinos\r\n            .forEach(s => {\r\n                s.prepararCohete();\r\n            })\r\n        ;\r\n\r\n\r\n    }\r\n\r\n    getNumSubmarinos() {\r\n        return this.listaSubmarinos\r\n            .filter(s => {\r\n                return s.isActivo;\r\n            }).length;\r\n    }\r\n\r\n    getNumCohetesReady() {\r\n        let numCoheteListo = this.getListaCohetes()\r\n            .filter(c => {\r\n                return c.getIsEstadoReady();\r\n            })\r\n            .length;\r\n\r\n        return numCoheteListo;\r\n    }\r\n\r\n}\r\n\r\n\r\nconst factoryJugador = {\r\n    local: function () {\r\n        let listaSubmarinos = factoryListaSubmarinos.random();\r\n        return new JugadorLocal(listaSubmarinos);\r\n    },\r\n    remoto: function (index) {\r\n\r\n        if (index === 0) {\r\n            throw new Error(\"No se puede poner index 0 a jugador remoto\");\r\n        }\r\n        return new JugadorRemoto(index);\r\n    }\r\n};","class JugadorRemoto extends AJugador {\r\n\r\n    constructor(indexCuadrante) {\r\n\r\n        super(indexCuadrante);\r\n\r\n        this.numSubmarinos = gameConfig.numSubmarinos;\r\n\r\n    }\r\n\r\n    getNumSubmarinos() {\r\n        return this.numSubmarinos;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst factoryJugadorRemoto = {\r\n    fromMsgJugadorIngresa: function (mensaje: MsgJugadorIngresa): JugadorRemoto {\r\n\r\n        let numJugador=gameData.listaJugadores.length +1 ;\r\n\r\n        return new JugadorRemoto(numJugador)\r\n    }\r\n};","class ResultadoOpe {\r\n\r\n    constructor(isOk, msg, dataAdicional) {\r\n\r\n        this.getIsSuccess = function () {\r\n            return isOk;\r\n        };\r\n\r\n        this.getMsg = function () {\r\n            return msg;\r\n        };\r\n\r\n        this.getData = function () {\r\n            return dataAdicional;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nlet FactoryResultadoOpe = {\r\n    OK: function (data = null) {\r\n        return new ResultadoOpe(true, msg, data);\r\n    },\r\n    Error: function (msg, data = null) {\r\n        return new ResultadoOpe(false, msg, data);\r\n    }\r\n\r\n};","//@flow\r\n\r\nclass Submarino {\r\n\r\n    constructor(posicionRC) {\r\n\r\n        this.id = IDGenerator();\r\n        this.isOnDrag = false;\r\n        this.posicionRC = posicionRC;\r\n        this.isActivo = true;\r\n\r\n        this.jugador = null;\r\n\r\n        this.cohete = null;\r\n        this.avancePrepararCohete = 0;\r\n        this.isPrimerDraw=true;\r\n\r\n\r\n    }\r\n\r\n    getJugador() {\r\n        return this.jugador();\r\n    }\r\n\r\n    setJugador(jugador) {\r\n        this.jugador = jugador;\r\n\r\n    }\r\n\r\n    getIsCoheteListo(): boolean {\r\n        return this.cohete !== null;\r\n    }\r\n\r\n    getPosicionRC(): PosicionRC {\r\n        return this.posicionRC;\r\n    }\r\n\r\n    /**Posicion relativa a la region/cuadrante*/\r\n    getPosicionXYRel(): Posicion {\r\n        const delta = gameConfig.deltaSep;\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n\r\n        const x = (this.getPosicionRC().c - 1) * (sizeCM + gameConfig.wDivision) + delta;\r\n\r\n        const y = (this.getPosicionRC().r - 1) * (sizeCM + gameConfig.wDivision) + delta;\r\n\r\n        return new Posicion(x, y);\r\n\r\n\r\n    }\r\n\r\n    recibeImpacto() {\r\n        this.isActivo = false;\r\n        this.isCoheteListo = false;\r\n    }\r\n\r\n\r\n    lanzaCohete(fnCB): void {\r\n\r\n    }\r\n\r\n    onCoheteListo(cohete: Cohete) {\r\n\r\n    }\r\n\r\n\r\n    prepararCohete(): void {\r\n\r\n        if (this.cohete === null) {\r\n            const numIntervalos = 6;\r\n            let intervalo = gameConfig.msPrepararCohete / numIntervalos;\r\n            this.avancePrepararCohete = 0;\r\n\r\n            let idInterval = null;\r\n\r\n            let fn = () => {\r\n                this.avancePrepararCohete++;\r\n\r\n                if (this.avancePrepararCohete >= numIntervalos) {\r\n\r\n                    window.clearInterval(idInterval);\r\n                    this.cohete = factoryCohete.jugadorLocal(this);\r\n                    gameData.jugadorLocal.listaCohetes.push(this.cohete);\r\n\r\n                }\r\n            };\r\n\r\n\r\n            //ponermos el intervalo al inicio mmuy corto para tener cohetes disponiles\r\n            intervalo=   this.isPrimerDraw?100:intervalo;\r\n\r\n            idInterval = window.setInterval(fn, intervalo);\r\n\r\n            this.isPrimerDraw=false;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst factoryListaSubmarinos = {\r\n\r\n    random: function () {\r\n\r\n        let lista = [];\r\n\r\n\r\n        while (lista.length < gameConfig.numSubmarinos) {\r\n            //agregar submarino\r\n\r\n\r\n            let r = 1 + Math.floor(Math.random() * (gameConfig.numDivisiones));\r\n            let c = 1 + Math.floor(Math.random() * (gameConfig.numDivisiones));\r\n\r\n            //buscar si se repiten\r\n\r\n            let numCoincidencias = lista\r\n                .filter(item => {\r\n                    return item.posicionRC.r === r && item.posicionRC.c === c;\r\n                })\r\n                .length\r\n            ;\r\n\r\n            if (numCoincidencias === 0) {\r\n\r\n                let posicionRC = new PosicionRC(r, c);\r\n                let submarino = new Submarino(posicionRC);\r\n                lista.push(submarino);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return lista;\r\n    }\r\n};\r\n","'use strict';\r\n//@flow\r\n\r\nconst gameData = {\r\n    tokenRoom: null,\r\n    canvas: null,\r\n    ctx: null,\r\n    jugadorLocal: null,\r\n    listaJugadores: [],\r\n    listaCohetes: [],\r\n    listaMsgSocket: [],\r\n    estado: null,\r\n    isResourcesLoaded: false,\r\n    isCanvasLoaded: false\r\n};\r\n\r\n\r\nloadCanvasAndResources((imgMar, imgBullet, imgTanque\r\n    , imgTanqueDest, imgRocket, imgExplosion\r\n) => {\r\n    gameConfig.resources.imgMar = imgMar;\r\n    gameConfig.resources.imgBullet = imgBullet;\r\n    gameConfig.resources.imgTanque = imgTanque;\r\n    gameConfig.resources.imgTanqueDest = imgTanqueDest;\r\n    gameConfig.resources.imgRocket = imgRocket;\r\n    gameConfig.resources.imgExplosion = imgExplosion;\r\n});\r\n\r\n\r\nconst gameController = {\r\n\r\n    engine: {\r\n        selpos: null,\r\n        esperarParticipantes: null,\r\n        batalla: null\r\n    },\r\n    onRegistroSocket: function (token) {\r\n        gameData.tokenRoom = token;\r\n        gameData.jugadorLocal = factoryJugador.local();\r\n\r\n        this.start()\r\n    },\r\n    start: function () {\r\n\r\n        if (gameData.isResourcesLoaded) {\r\n            this.runConfirmarPosiciones();\r\n\r\n        } else {\r\n\r\n\r\n            //se verifica si estan cargadoir\r\n            loadCanvasAndResources((imgMar, imgBullet, imgTanque) => {\r\n                gameConfig.resources.imgMar = imgMar;\r\n                gameConfig.resources.imgBullet = imgBullet;\r\n                gameConfig.resources.imgTanque = imgTanque;\r\n                this.runConfirmarPosiciones();\r\n            });\r\n\r\n\r\n        }\r\n    },\r\n    runConfirmarPosiciones: function () {\r\n\r\n        console.log('runConfirmarPosiciones');\r\n        gameData.estado = gameEstado.ConfirmarPosicion;\r\n\r\n        let fnOnConfirmar = () => {\r\n            gameController.runEsperarParticipantes();\r\n\r\n            this.engine.selpos = null;\r\n        };\r\n\r\n        this.engine.selpos = new EngineSelPos(fnOnConfirmar);\r\n        this.engine.selpos.run();\r\n\r\n    },\r\n    runEsperarParticipantes: function () {\r\n\r\n        console.log('runEsperarParticipantes');\r\n        gameData.estado = gameEstado.EsperarParticipantes;\r\n\r\n        let fnOnContinuar = () => {\r\n\r\n            this.engine.esperarParticipantes = null;\r\n            gameData.ctx.fillStyle = `rgb(0, 0, 0)`;\r\n            gameData.ctx.fillRect(0, 0, gameConfig.size, gameConfig.size);\r\n            gameController.runBatalla();\r\n        };\r\n\r\n        this.engine.esperarParticipantes = new EngineEsperar(fnOnContinuar);\r\n        this.engine.esperarParticipantes.run();\r\n\r\n    },\r\n    runBatalla: async function () {\r\n        console.log('runBatalla');\r\n        gameData.estado = gameEstado.Batalla;\r\n\r\n        let fnOnContinuar = () => {\r\n\r\n\r\n            this.engine.esperarParticipantes = null;\r\n\r\n            gameData.ctx.fillStyle = `rgb(0, 0, 0)`;\r\n            gameData.ctx.fillRect(0, 0, gameConfig.size, gameConfig.size);\r\n\r\n            gameController.runTerminoBatalla();\r\n\r\n\r\n        };\r\n\r\n        let pausa = await setTimeout(() => {\r\n            return true;\r\n        }, 2000);\r\n\r\n        let engine = new EngineBatalla(fnOnContinuar);\r\n        this.engine.batalla = engine;\r\n\r\n        engine.run();\r\n\r\n    },\r\n    runTerminoBatalla: function () {\r\n        gameData.estado = gameEstado.TerminoBatalla;\r\n        console.log('batalla terminada');\r\n    },\r\n    onRecibirMensajeSocket: function (msg) {\r\n        proRecibirMsgSocket.exe(msg);\r\n    },\r\n    onEnviarMensajeSocket: function (msg) {\r\n\r\n        //TODO enviar mensaje de confirmar\r\n    }\r\n\r\n\r\n};","/*@flow*/\r\n\r\nconst drawSelPos = {\r\n\r\n    drawSubmarino: function (ctx, submarino: Submarino) {\r\n\r\n        const origen = submarino.jugador.getOrigenFromIndex();\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n\r\n        const posRel=submarino.getPosicionXYRel();\r\n\r\n        const x = origen.x + posRel.x;\r\n        const y = origen.y + posRel.y;\r\n\r\n        //se dibuja diferente si esta en drag\r\n        if( submarino.isOnDrag){\r\n            ctx.fillStyle = \"rgba(100, 100, 100, 0.5)\";\r\n        }else{\r\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.9)\";\r\n        }\r\n\r\n        let submarinoSize=sizeCM / 2;\r\n        let dy=sizeCM/4;\r\n\r\n        ctx.fillRect(x +dy, y +sizeCM/4,submarinoSize , submarinoSize);\r\n    },\r\n    drawDragSubmarino:function(ctx,posicionRCC: PosicionRCCuadrante){\r\n\r\n        const origen =factoryPosicionRCCuadrante.getOrigenCuadrante( posicionRCC.getIndexCuadrante());\r\n\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        const origenMar = new Posicion(origen.x + delta, origen.y + delta);\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n\r\n        const x = origenMar.x + (posicionRCC.getC() - 1) * (sizeCM + gameConfig.wDivision);\r\n        const y = origenMar.y + (posicionRCC.getR() - 1) * (sizeCM + gameConfig.wDivision);\r\n\r\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\r\n        let submarinoSize=sizeCM / 2;\r\n        ctx.fillRect(x +sizeCM/4, y +sizeCM/4,submarinoSize , submarinoSize);\r\n\r\n\r\n    },\r\n\r\n    local: function (ctx, jugador: JugadorLocal) {\r\n\r\n        const delta = gameConfig.deltaSep;\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n\r\n        let cacheRegionConMar = this.getCacheCanvasRegionConMar(jugador);\r\n\r\n        let origen = jugador.getOrigenFromIndex();\r\n\r\n\r\n        /* draw el cache  */\r\n        ctx.drawImage(cacheRegionConMar, 0, 0, sizeRegion, sizeRegion, origen.x, origen.y, sizeRegion, sizeRegion);\r\n\r\n\r\n        /* actualziar dra numero sub*/\r\n        let numSubmarino = jugador.getNumSubmarinos();\r\n        ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n        ctx.font = '19px monospace';\r\n        ctx.fillText(numSubmarino.toString(), origen.x + sizeRegion - delta - 20, origen.y + delta - 4);\r\n\r\n\r\n\r\n        let sizeTexto=470;\r\n        let dx= ( (sizeRegion *3) - sizeTexto )/2;\r\n        ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\r\n        ctx.fillText('Arrastra los submarinos a la posición deseada', dx, sizeRegion*2+50);\r\n        ctx.fillText('Presiona Enter para continuar', dx +80, sizeRegion*2+100);\r\n\r\n\r\n        jugador.getListaSubmarinos().forEach(s => {\r\n            this.drawSubmarino(ctx, s);\r\n        });\r\n\r\n    },\r\n    cacheCanvasRegionConMar: null,\r\n    getCacheCanvasRegionConMar: function (jugador: JugadorLocal) {\r\n\r\n        if (this.cacheCanvasRegionConMar !== null) {\r\n            return this.cacheCanvasRegionConMar;\r\n        }\r\n\r\n        const sizeRegion = gameConfig.size / 3;\r\n        const delta = gameConfig.deltaSep;\r\n\r\n\r\n        const cacheRegionConMar = document.createElement('canvas');\r\n        cacheRegionConMar.width = sizeRegion;\r\n        cacheRegionConMar.height = sizeRegion;\r\n\r\n        const ctxCache = cacheRegionConMar.getContext('2d');\r\n\r\n        //el decorado de la region\r\n        const origen = jugador.getOrigenFromIndex();\r\n        ctxCache.fillRect(0, 0, sizeRegion, sizeRegion);\r\n\r\n        //la seccion de mar\r\n        const sizeMar = sizeRegion - 2 * delta;\r\n        ctxCache.drawImage(gameConfig.resources.imgMar, 0, 0, sizeMar, sizeMar, delta, delta, sizeMar, sizeMar);\r\n\r\n        //las divisiones\r\n        const sizeDiv = (sizeRegion - (gameConfig.wDivision * gameConfig.numDivisiones)) / gameConfig.numDivisiones;\r\n        const rayaSize = sizeRegion - 2 * delta;\r\n\r\n        const sizeCM = (sizeMar - gameConfig.numDivisiones * gameConfig.wDivision) / gameConfig.numDivisiones;\r\n\r\n\r\n        ctxCache.fillStyle = \"rgba(255, 255, 255, 0.7)\";\r\n\r\n        for (let i = 1; i < gameConfig.numDivisiones; i++) {\r\n            ctxCache.fillRect(i * (sizeCM + gameConfig.wDivision) + delta, delta, gameConfig.wDivision, rayaSize);\r\n            ctxCache.fillRect(delta, i * (sizeCM + gameConfig.wDivision) + delta, rayaSize, gameConfig.wDivision);\r\n        }\r\n\r\n        /* el cache de texto */\r\n        ctxCache.font = '18px monospace';\r\n        ctxCache.fillStyle = \"rgba(200, 200, 200, 0.7)\";\r\n        ctxCache.fillText('SUBMARINOS', sizeMar - 112, 16);\r\n\r\n        this.cacheCanvasRegionConMar = cacheRegionConMar;\r\n\r\n        return cacheRegionConMar;\r\n\r\n    },\r\n    onClickCanvas(x: number, y: number) :void {\r\n\r\n\r\n    },\r\n    onMouseHoverCanvas(x,y):void{\r\n        console.log(`${x},${y}`);\r\n    }\r\n};\r\n\r\n\r\n","/* @flow */\r\n\r\nclass EngineSelPos extends AEngine {\r\n\r\n    constructor(fnOnContinuar) {\r\n\r\n        super(fnOnContinuar);\r\n\r\n        this.posicionOnDrag = null;\r\n        this.submarinoOnDrag = null;\r\n        this.mouseEstatus = null;\r\n\r\n        this.addEventosMouseAndKeyboard();\r\n\r\n    }\r\n\r\n    run() {\r\n        const ctx = this.ctx;\r\n        const jugador = this.jugadorLocal;\r\n\r\n        this.mouseEstatus = 'select';\r\n        this.isRunning = true;\r\n\r\n        let idFrame = null;\r\n\r\n        const frames = () => {\r\n\r\n            if (!this.isRunning) {\r\n                window.cancelAnimationFrame(idFrame);\r\n                return;\r\n            }\r\n\r\n            drawSelPos.local(ctx, jugador);\r\n\r\n\r\n            if (this.posicionOnDrag !== null) {\r\n                let p = this.posicionOnDrag;\r\n                drawSelPos.drawDragSubmarino(ctx, p);\r\n            }\r\n\r\n\r\n            idFrame = window.requestAnimationFrame(frames);\r\n\r\n        };\r\n\r\n        idFrame = window.requestAnimationFrame(frames);\r\n\r\n\r\n    }\r\n\r\n    addEventosMouseAndKeyboard() {\r\n\r\n        let canvas = gameData.canvas;\r\n\r\n        canvas.onmousedown = (event) => {\r\n            this.onMouseDown(event);\r\n        };\r\n\r\n        canvas.onmouseup = (event) => {\r\n            this.onMouseUp(event);\r\n        };\r\n\r\n        canvas.onmousemove = (event) => {\r\n            this.onMouseMove(event);\r\n        };\r\n\r\n        document.onkeydown = (event) => {\r\n            this.onKeyDow(event);\r\n        };\r\n    }\r\n\r\n    onMouseDown(event) {\r\n\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n        if (posicionRCCuadrante === null) {\r\n            return;\r\n        }\r\n\r\n        if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n            return;\r\n        }\r\n\r\n        let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n        if (!sub) {\r\n            return;\r\n        }\r\n\r\n        this.submarinoOnDrag = sub;\r\n\r\n        this.mouseEstatus = 'arrastrando';\r\n        // this.canvas.style.cursor = 'move';\r\n\r\n        //actualizar esttado de subarino para ponerlo como drag\r\n\r\n        let idSub = sub.id;\r\n        this.jugadorLocal.getListaSubmarinos()\r\n            .forEach(s => {\r\n                s.isOnDrag = s.id === idSub;\r\n            });\r\n\r\n\r\n        //guardar la posicion\r\n        this.posicionOnDrag = posicionRCCuadrante;\r\n\r\n    }\r\n\r\n    onMouseUp(event) {\r\n\r\n        if (this.mouseEstatus !== 'arrastrando') {\r\n            return;\r\n        }\r\n\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n\r\n        if (posicionRCCuadrante === null) {\r\n            this.mouseEstatus = 'select';\r\n            return;\r\n        }\r\n\r\n        if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n            this.mouseEstatus = 'select';\r\n            return;\r\n        }\r\n\r\n        //ver si en la posicion hay un submariuono - no se puede encimar\r\n        let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n\r\n        if (sub) {\r\n            //hay submarino\r\n            this.submarinoOnDrag.isOnDrag = false;\r\n            this.submarinoOnDrag = null;\r\n            this.posicionOnDrag = null;\r\n            this.mouseEstatus = 'select';\r\n            this.canvas.style.cursor = 'pointer';\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        this.submarinoOnDrag.getPosicionRC().c = posicionRCCuadrante.getC();\r\n        this.submarinoOnDrag.getPosicionRC().r = posicionRCCuadrante.getR();\r\n        this.submarinoOnDrag.isOnDrag = false;\r\n\r\n        this.submarinoOnDrag = null;\r\n        this.posicionOnDrag = null;\r\n\r\n        this.mouseEstatus = 'select';\r\n        this.canvas.style.cursor = 'pointer';\r\n    }\r\n\r\n    onMouseMove(event) {\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n\r\n        if (this.mouseEstatus === 'select') {\r\n\r\n            this.canvas.style.cursor = 'default';\r\n\r\n            //paso 1 encontrar si es una celda de region jugador\r\n\r\n            if (posicionRCCuadrante === null) {\r\n                return;\r\n            }\r\n\r\n            if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n                return;\r\n            }\r\n\r\n\r\n            let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n\r\n            if (!sub) {\r\n                //no hay submarino\r\n                return;\r\n            }\r\n\r\n\r\n            this.canvas.style.cursor = 'pointer';\r\n\r\n        }\r\n\r\n        if (this.mouseEstatus === 'arrastrando') {\r\n\r\n            this.canvas.style.cursor = 'pointer';\r\n            // this.canvas.style.cursor = 'move';\r\n\r\n            if (posicionRCCuadrante === null) {\r\n                this.mouseEstatus = 'select';\r\n                this.submarinoOnDrag.isOnDrag = false;\r\n                this.posicionOnDrag = null;\r\n                return;\r\n            }\r\n\r\n            if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n                this.mouseEstatus = 'select';\r\n                this.submarinoOnDrag.isOnDrag = false;\r\n                this.posicionOnDrag = null;\r\n                return;\r\n\r\n            }\r\n\r\n            let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n\r\n            if (sub) {\r\n                //si hay un submarino no lo podemos poenr\r\n                return;\r\n            }\r\n\r\n            this.posicionOnDrag = posicionRCCuadrante;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    onKeyDow(event) {\r\n\r\n        if (event.code !== \"Enter\") {\r\n            return;\r\n        }\r\n\r\n        this.isRunning = false;\r\n        this.jugadorLocal.isPosicionConfirmada=true;\r\n        this.removeEventosMouseAndKeyBoard();\r\n        this.fnOnContinuar();\r\n\r\n    }\r\n\r\n    getSubFromPos(posicionRCCuadrante) {\r\n        let sub = this.jugadorLocal.getListaSubmarinos()\r\n            .find(s => {\r\n                return s.getPosicionRC().r === posicionRCCuadrante.getR() &&\r\n                    s.getPosicionRC().c === posicionRCCuadrante.getC();\r\n            });\r\n        return sub;\r\n    }\r\n}\r\n\r\n","/*@flow*/\r\n\r\nconst drawEsperar = {\r\n\r\n\r\n    oscurecer: (ctx, fnCallback) => {\r\n\r\n        let numPasos = 100;\r\n        let indexFrame = 0;\r\n\r\n        let key = null;\r\n        const framesOscurecer = () => {\r\n\r\n            indexFrame++;\r\n\r\n            ctx.fillStyle = `rgba(0, 0, 0, 0.02)`;\r\n            ctx.fillRect(0, 0, gameConfig.size, gameConfig.size);\r\n\r\n            if (indexFrame < numPasos) {\r\n                key = window.requestAnimationFrame(framesOscurecer);\r\n            } else {\r\n                ctx.fillStyle = \"rgb(0,0,0)\";\r\n                ctx.fillRect(0, 0, gameConfig.size, gameConfig.size);\r\n                window.cancelAnimationFrame(key);\r\n                fnCallback();\r\n            }\r\n\r\n        };\r\n\r\n        framesOscurecer();\r\n\r\n    },\r\n\r\n\r\n    actualizarTextoEspera: (ctx, numJugadores, numConfirmados) => {\r\n\r\n        /* no es una animación solo se pintan los textos despues de poner pondo negro*/\r\n\r\n        let idFrame=null;\r\n        /*Fondo negro*/\r\n        function frame(){\r\n\r\n            console.log( `jugadore-confirmados ${numJugadores},${numConfirmados}`);\r\n            ctx.fillStyle = `rgb(0, 0, 0)`;\r\n            ctx.fillRect(0, 0, gameConfig.size, gameConfig.size);\r\n\r\n\r\n            let textoTop = 'Esperando a los demás jugadores';\r\n            //textos\r\n            let texto = `${numConfirmados} de ${numJugadores} han confirmado posiciones`;\r\n\r\n            ctx.fillStyle = \"rgb(255, 255, 0)\";\r\n            ctx.font = '28px monospace';\r\n            ctx.fillText(textoTop, (gameConfig.size - 476) / 2, 150);\r\n            ctx.fillText(texto, (gameConfig.size - 465) / 2, gameConfig.size / 2);\r\n\r\n        }\r\n\r\n        frame();\r\n\r\n    }\r\n\r\n};","/* @flow */\r\n\r\nclass EngineEsperar extends AEngine {\r\n\r\n    constructor(fnOnContinuar) {\r\n\r\n        super(fnOnContinuar);\r\n\r\n\r\n        this.estado = '';\r\n    }\r\n\r\n    run() {\r\n        const ctx = this.ctx;\r\n        const jugador = this.jugadorLocal;\r\n        const listaJugadores = gameData.listaJugadores;\r\n\r\n        this.isRunning = true;\r\n\r\n        //Fase 1 oscurecer la ultima vista\r\n\r\n        let fnCallback = () => {\r\n            //actulizar texto de jugadores confirmados\r\n            this.onJugadorRemotoConfirma();\r\n        };\r\n\r\n        this.estado = 'oscurecer';\r\n\r\n        drawEsperar.oscurecer(ctx, fnCallback);\r\n    }\r\n\r\n    onJugadorRemotoConfirma() {\r\n        const ctx = this.ctx;\r\n        let numJugadores = gameData.listaJugadores.length;\r\n\r\n        let numConfirmados = gameData.listaJugadores\r\n            .filter(j => {\r\n                return j.isPosicionConfirmada;\r\n            }).length;\r\n\r\n        if (this.estado !== 'saliendo') {\r\n            //poner el texto caundots jugadores estan confirmados\r\n            drawEsperar.actualizarTextoEspera(ctx, numJugadores, numConfirmados);\r\n        }\r\n\r\n        if (numJugadores === numConfirmados) {\r\n            this.estado = 'saliendo';\r\n            setTimeout(this.fnOnContinuar, 2000);\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}","//@flow\r\n\"use strict\";\r\n\r\nconst drawBatallaAllRegions = {\r\n\r\n    exe: function (ctx) {\r\n\r\n        let cacheMar = this.getCacheCanvasAll();\r\n        ctx.drawImage(cacheMar, 0, 0, gameConfig.size, gameConfig.size);\r\n\r\n    },\r\n    cacheRegionAll: null,\r\n    getCacheCanvasAll: function () {\r\n\r\n        //vamos a dibujar todos los jugadores\r\n        if (this.cacheRegionAll !== null) {\r\n            return this.cacheRegionAll;\r\n        }\r\n\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        //este canvas tendra todo el mapa\r\n        const cacheCanvas = document.createElement('canvas');\r\n        cacheCanvas.width = gameConfig.size;\r\n        cacheCanvas.height = gameConfig.size;\r\n\r\n        const ctx = cacheCanvas.getContext('2d');\r\n\r\n        //blanco para reslatar el cambio ----------------------------------------\r\n        ctx.fillStyle = 'darkslategray';\r\n        ctx.fillRect(0, 0, gameConfig.size, gameConfig.size);\r\n\r\n        //dibujar el sector de jugador local con sus submarinos -----------------\r\n\r\n        const sizeMar = sizeRegion - 2 * delta;\r\n        const sizeDiv = (sizeRegion - (gameConfig.wDivision * gameConfig.numDivisiones)) / gameConfig.numDivisiones;\r\n        const rayaSize = sizeRegion - 2 * delta;\r\n        const sizeCM = (sizeMar - gameConfig.numDivisiones * gameConfig.wDivision) / gameConfig.numDivisiones;\r\n\r\n\r\n        let wCohete = 36;\r\n        let hCohete = 24;\r\n\r\n\r\n        function drawSeccionFromOrigen(origen, indexJugador) {\r\n            ctx.fillStyle = '#000000';\r\n            ctx.fillRect(origen.x, origen.y, sizeRegion, sizeRegion);\r\n\r\n            //la seccion de mar\r\n            ctx.drawImage(gameConfig.resources.imgMar, 0, 0, sizeMar, sizeMar, delta + origen.x, delta + origen.y, sizeMar, sizeMar);\r\n\r\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\r\n\r\n            for (let i = 1; i < gameConfig.numDivisiones; i++) {\r\n                let xCuadro = origen.x + i * (sizeCM + gameConfig.wDivision) + delta;\r\n                let yCuadro = origen.y + delta;\r\n                ctx.fillRect(xCuadro, yCuadro, gameConfig.wDivision, rayaSize);\r\n\r\n                xCuadro = origen.x + delta;\r\n                yCuadro = origen.y + i * (sizeCM + gameConfig.wDivision) + delta;\r\n                ctx.fillRect(xCuadro, yCuadro, rayaSize, gameConfig.wDivision);\r\n            }\r\n\r\n\r\n            if(indexJugador===1){\r\n                ctx.drawImage(gameConfig.resources.imgBullet, 0, 0, wCohete, hCohete,\r\n                    origen.x + delta - 2,\r\n                    origen.y + 2,\r\n                    wCohete * .6, hCohete * .6);\r\n            }\r\n\r\n            ctx.font = '18px monospace';\r\n            ctx.fillStyle = \"rgba(200, 200, 200, 0.7)\";\r\n            ctx.fillText('Player ' + indexJugador.toString(), origen.x + (sizeMar - 30) / 2, origen.y + 16);\r\n\r\n\r\n            ctx.drawImage(gameConfig.resources.imgTanque, 0, 0, 100, 100,\r\n                origen.x + sizeMar - delta - 6,\r\n                origen.y - 5,\r\n                30, 30);\r\n\r\n\r\n        }\r\n\r\n\r\n        let listaOrigen = gameData.listaJugadores.map(j => {\r\n            return j.getOrigenFromIndex();\r\n        });\r\n\r\n        listaOrigen.unshift(gameData.jugadorLocal.getOrigenFromIndex());\r\n\r\n        let indexJugador = 0;\r\n        listaOrigen.map(origen => {\r\n            indexJugador++;\r\n            drawSeccionFromOrigen(origen, indexJugador);\r\n        });\r\n\r\n\r\n        this.cacheRegionAll = cacheCanvas;\r\n\r\n        return this.cacheRegionAll;\r\n    },\r\n    resetCacheCanvasAll: function () {\r\n        this.cacheRegionAll = null;\r\n    }\r\n};","//@flow\r\n\"use strict\";\r\n\r\nconst drawBatallaAtaque = {\r\n\r\n    exe: function (ctx) {\r\n\r\n        //para el jugador local\r\n        this.contadorCohetes(ctx);\r\n\r\n        //local y remoito\r\n        this.contadorSubmarinos(ctx);\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n    contadorSubmarinos: function (ctx) {\r\n\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        let listaJugador = gameData.listaJugadores.map(j => {\r\n            return j;\r\n        });\r\n\r\n        listaJugador.unshift(gameData.jugadorLocal);\r\n\r\n        listaJugador.map(jugador => {\r\n\r\n            const numSubmarino = jugador.getNumSubmarinos();\r\n            const origen=jugador.getOrigenFromIndex();\r\n\r\n            ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n            ctx.font = '19px monospace';\r\n            ctx.fillText(numSubmarino.toString(), origen.x + sizeRegion - delta - 20, origen.y + delta - 4);\r\n\r\n        });\r\n    },\r\n    contadorCohetes: function (ctx) {\r\n        const jugador = gameData.jugadorLocal;\r\n        const origen = jugador.getOrigenFromIndex();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        let numCohetes = jugador.getNumCohetesReady();\r\n\r\n        ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\r\n        ctx.font = '19px monospace';\r\n        ctx.fillText(numCohetes.toString(), origen.x +  delta + 20, origen.y + delta - 4);\r\n    }\r\n\r\n};","//@flow\r\n\"use strict\";\r\n\r\nconst drawBatallaSubmarinosLocal = {\r\n\r\n    cacheSubmarinosLocal: null,\r\n    exe: function (ctx) {\r\n\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n\r\n        let cache = this.getCacheSubmarinosLocal();\r\n\r\n        let origen = gameData.jugadorLocal.getOrigenFromIndex();\r\n\r\n        ctx.drawImage(cache, 0, 0, sizeRegion, sizeRegion, origen.x, origen.y, sizeRegion, sizeRegion);\r\n\r\n    },\r\n\r\n    drawSubmarino: function (ctxRegion, submarino: Submarino) {\r\n\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n        const posRel= submarino.getPosicionXYRel();\r\n\r\n        let imgSubmarino= submarino.isActivo? gameConfig.resources.imgTanque : gameConfig.resources.imgTanqueDest;\r\n\r\n        ctxRegion.drawImage(imgSubmarino, 0, 0, 100, 100, posRel.x , posRel.y, sizeCM, sizeCM);\r\n\r\n    },\r\n\r\n    getCacheSubmarinosLocal: function () {\r\n\r\n        //vamos a dibujar todos los jugadores\r\n        if (this.cacheSubmarinosLocal !== null) {\r\n            return this.cacheSubmarinosLocal;\r\n        }\r\n\r\n        const jugador = gameData.jugadorLocal;\r\n\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        //este canvas tendra todo el mapa\r\n        const cacheCanvasRegion = document.createElement('canvas');\r\n        cacheCanvasRegion.width = sizeRegion;\r\n        cacheCanvasRegion.height = sizeRegion;\r\n\r\n        const ctxRegion = cacheCanvasRegion.getContext('2d');\r\n\r\n        //los submarinos listos\r\n        let numActivos = 0;\r\n        jugador.getListaSubmarinos()\r\n            .forEach(s => {\r\n\r\n                    this.drawSubmarino(ctxRegion, s);\r\n\r\n                    if (s.isActivo) {\r\n                        numActivos++;\r\n                    }\r\n                }\r\n            );\r\n\r\n\r\n        this.cacheSubmarinosLocal = cacheCanvasRegion;\r\n\r\n        return cacheCanvasRegion;\r\n\r\n    }\r\n};","//@flow\r\n\r\nclass EngineBatalla extends AEngine {\r\n\r\n    constructor(fnOnContinuar) {\r\n        super(fnOnContinuar);\r\n\r\n        this.addEventosMouseAndKeyboard();\r\n\r\n        this.posicionEnLaMira = null;\r\n\r\n    }\r\n\r\n\r\n    run() {\r\n        const ctx = this.ctx;\r\n        const jugador = this.jugadorLocal;\r\n\r\n        this.isRunning = true;\r\n\r\n        let idFrame = null;\r\n\r\n        //al estar en modo batalla los submarinos comienzan a cargar cohetes\r\n\r\n        jugador.prepararCohetes();\r\n\r\n        const frames = () => {\r\n\r\n            if (!this.isRunning) {\r\n                window.cancelAnimationFrame(idFrame);\r\n                return;\r\n            }\r\n\r\n            drawBatallaAllRegions.exe(ctx);\r\n            drawBatallaSubmarinosLocal.exe(ctx);\r\n            drawBatallaAtaque.exe(ctx);\r\n\r\n            idFrame = window.requestAnimationFrame(frames);\r\n\r\n        };\r\n\r\n        idFrame = window.requestAnimationFrame(frames);\r\n\r\n       // frames();\r\n\r\n\r\n    }\r\n\r\n    addEventosMouseAndKeyboard() {\r\n\r\n\r\n        let canvas = gameData.canvas;\r\n\r\n        canvas.onmouseclick = (event) => {\r\n            this.onMouseClick(event);\r\n        };\r\n\r\n        canvas.onmousemove = (event) => {\r\n            this.onMouseMove(event);\r\n        };\r\n\r\n\r\n    }\r\n\r\n    onMouseClick(event) {\r\n\r\n\r\n        return;\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n        if (posicionRCCuadrante === null) {\r\n\r\n            return;\r\n        }\r\n\r\n        if (posicionRCCuadrante.getIndexCuadrante() === 0) {\r\n            //salimos si nos apuntamos a nosotros mismos\r\n            return;\r\n        }\r\n\r\n\r\n        //buscar la posicion en la lista de posiciones atacadas y salir sio ya fue atacada\r\n\r\n\r\n        let idSub = sub.id;\r\n        this.jugadorLocal.getListaSubmarinos()\r\n            .forEach(s => {\r\n                s.isOnDrag = s.id === idSub;\r\n            });\r\n\r\n\r\n        //guardar la posicion\r\n        this.posicionOnDrag = posicionRCCuadrante;\r\n\r\n    }\r\n\r\n    onMouseMove(event) {\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n        if (posicionRCCuadrante === null) {\r\n            this.canvas.style.cursor = 'default';\r\n            this.posicionEnLaMira = null;\r\n            return;\r\n        }\r\n\r\n\r\n        let indexCuadrante = posicionRCCuadrante.getIndexCuadrante();\r\n\r\n        //salimos porque nos apuntamos a nosotros mismos\r\n        if (indexCuadrante === 0) {\r\n            this.canvas.style.cursor = 'default';\r\n            this.posicionEnLaMira = null;\r\n            return;\r\n\r\n        }\r\n        //salimos porque no hay un jugador en ese cuadrante\r\n        if (gameData.listaJugadores.length < indexCuadrante) {\r\n            this.canvas.style.cursor = 'default';\r\n            this.posicionEnLaMira = null;\r\n            return;\r\n        }\r\n\r\n\r\n        //guardar que posicion estamos apuntando\r\n        this.posicionEnLaMira = posicionRCCuadrante;\r\n        this.canvas.style.cursor = 'crosshair';\r\n\r\n\r\n    }\r\n\r\n\r\n    getSubFromPos(posicionRCCuadrante) {\r\n        let sub = this.jugadorLocal.getListaSubmarinos()\r\n            .find(s => {\r\n                return s.getPosicionRC().r === posicionRCCuadrante.getR() &&\r\n                    s.getPosicionRC().c === posicionRCCuadrante.getC();\r\n            });\r\n        return sub;\r\n    }\r\n\r\n}\r\n","//@flow\r\n\r\nconst configTipoMensaje = {\r\n    JugadorIngresa:'JugadorIngresa',\r\n    JugadorSale:'JugadorSale',\r\n    IniciarBatalla: 'IniciarBatalla',\r\n    LanzarCohete:'LanzarCohete',\r\n    ResultadoAtaque:'ResultadoAtaque',\r\n    Rendicion:'Rendicion',\r\n    TerminoBatalla:'TerminoBatalla'\r\n};\r\n","/* @flow */\r\nconst tipoMsgSocket = {\r\n    ingresa: 'ingresa',\r\n    sale:'sale',\r\n    confirma_posiciones:'confirma_posiciones',\r\n    inicia_batalla:'inicia_batalla',\r\n    lanza_cohete:'lanza_cohete',\r\n    resultado_ataque:'resultado_ataque',\r\n};\r\n\r\n\r\nconst factoryMensajeSocket = {\r\n    JugadorIngresa: function (token :string, id_jugador :int ) {\r\n        return {\r\n            id_jugador,\r\n            token,\r\n            tipo: tipoMsgSocket.ingresa\r\n        };\r\n    },\r\n    JugadorConfirma: function (token :string, id_jugador : int) {\r\n        return {\r\n            id_jugador,\r\n            token,\r\n            tipo: tipoMsgSocket.confirma_posiciones\r\n        }\r\n    }\r\n};","/* @flow */\r\n\r\nconst proRecibirMsgSocket = {\r\n    exe: function (msg) {\r\n\r\n        const jugador = this.getJugadorFromId(parseInt(msg.id_jugador));\r\n\r\n        if (msg.tipo === tipoMsgSocket.ingresa) {\r\n            this.jugador_ingresa(jugador);\r\n\r\n\r\n        } else if (msg.tipo === tipoMsgSocket.confirma_posiciones) {\r\n            this.jugador_confirma_posicion(jugador)\r\n\r\n        } else {\r\n            alert(\"no esperamos este tipo de mensaje \" + msg.tipo)\r\n        }\r\n\r\n\r\n    },\r\n    jugador_ingresa: function (jugador: JugadorRemoto) {\r\n\r\n    },\r\n    jugador_confirma_posicion: function (jugador: JugadorRemoto) {\r\n        jugador.setPosicionConfirmada();\r\n\r\n        //notificar al controller - si no esta en la etapa de espera\r\n\r\n        if (gameController.engine.esperarParticipantes) {\r\n            gameController.engine.esperarParticipantes.onJugadorRemotoConfirma();\r\n        }\r\n\r\n    },\r\n    getJugadorFromId: function (id_jugador: number): JugadorRemoto {\r\n\r\n\r\n        return gameData.listaJugadores\r\n            .find(\r\n                jugador => {\r\n                    return jugador.id === id_jugador;\r\n                }\r\n            )\r\n            ;\r\n\r\n\r\n    }\r\n\r\n};","/* @flow */\r\n\r\nclass Posicion {\r\n\r\n    constructor(x, y, z=0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n    toString(){\r\n        return `${this.x}, ${this.y}`;\r\n    }\r\n\r\n}","class PosicionRC {\r\n\r\n    constructor(r, c) {\r\n        this.r = r;\r\n        this.c = c;\r\n    }\r\n\r\n    toString(){\r\n        return `c:${this.c},r:${this.r}`;\r\n    }\r\n}","class PosicionRCCuadrante {\r\n\r\n    constructor(indexCuadrante: number, posicionRC: PosicionRC) {\r\n        this.indexCuadrante = indexCuadrante;\r\n        this.posicionRC = posicionRC;\r\n    }\r\n\r\n    getIndexCuadrante() {\r\n        return this.indexCuadrante;\r\n    }\r\n\r\n    getR() {\r\n        return this.posicionRC.r;\r\n    }\r\n\r\n    getC() {\r\n        return this.posicionRC.c;\r\n    }\r\n\r\n    toString() {\r\n        return `cuad:${this.indexCuadrante} c:${this.posicionRC.c} r: ${this.posicionRC.r}`;\r\n    }\r\n}\r\n\r\nconst factoryPosicionRCCuadrante = {\r\n\r\n    fromEventMouse: function (event) {\r\n        const x = event.clientX;\r\n        const y = event.clientY;\r\n\r\n        return this.fromXY(x, y);\r\n    },\r\n    fromXY: function (x, y) {\r\n\r\n        //paso 1 determinar el cuadrante\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        function getPosicionCuadrante(valor) {\r\n            return Math.floor(valor / sizeRegion);\r\n        }\r\n\r\n        let cuadranteX = getPosicionCuadrante(x);\r\n        let cuadranteY = getPosicionCuadrante(y);\r\n\r\n        if (cuadranteY === 3 || cuadranteX === 3) {\r\n            return null;\r\n        }\r\n\r\n        let code = `${cuadranteX}-${cuadranteY}`;\r\n\r\n        let indexCuadrante = this.dicCuadranteIndex[code];\r\n\r\n        let origenCuadrante = this.getOrigenCuadrante(indexCuadrante);\r\n\r\n        //obtener rango del mar\r\n        let xMarIni = origenCuadrante.x + delta;\r\n        let xMarFin = xMarIni + gameCacheSize.getSizeMar();\r\n\r\n        let yMarIni = origenCuadrante.y + delta;\r\n        let yMarFin = yMarIni + gameCacheSize.getSizeMar();\r\n\r\n\r\n        if (x >= xMarIni && x <= xMarFin && y >= yMarIni && y <= yMarFin) {\r\n\r\n            //encontrar la posicion RC\r\n            let xRel = x - xMarIni;\r\n            let yRel = y - yMarIni;\r\n            let celda = gameCacheSize.getSizeCM() + gameConfig.wDivision;\r\n\r\n            let c = 1 + Math.floor(xRel / celda);\r\n            let r = 1 + Math.floor(yRel / celda);\r\n            let posicionRC = new PosicionRC(r, c);\r\n            return new PosicionRCCuadrante(indexCuadrante, posicionRC);\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    dicCuadranteIndex: {\r\n        '0-0': 5,\r\n        '0-1': 2,\r\n        '0-2': 7,\r\n        '1-0': 1,\r\n        '1-1': 0,\r\n        '1-2': 4,\r\n        '2-0': 6,\r\n        '2-1': 3,\r\n        '2-2': 8,\r\n    },\r\n    getOrigenCuadrante(cuadrante: number) {\r\n\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n\r\n        if (cuadrante === 5) {\r\n            return new Posicion(0, 0);\r\n        } else if (cuadrante === 1) {\r\n            return new Posicion(sizeRegion, 0);\r\n        } else if (cuadrante === 6) {\r\n            return new Posicion(sizeRegion * 2, 0);\r\n        }\r\n\r\n        if (cuadrante === 2) {\r\n            return new Posicion(0, sizeRegion);\r\n        } else if (cuadrante === 0) {\r\n            return new Posicion(sizeRegion, sizeRegion);\r\n        } else if (cuadrante === 3) {\r\n            return new Posicion(sizeRegion * 2, sizeRegion);\r\n        }\r\n\r\n\r\n        if (cuadrante === 7) {\r\n            return new Posicion(0, sizeRegion * 2);\r\n        } else if (cuadrante === 4) {\r\n            return new Posicion(sizeRegion, sizeRegion * 2);\r\n        } else if (cuadrante === 8) {\r\n            return new Posicion(sizeRegion * 2, sizeRegion * 2);\r\n        }\r\n\r\n        throw new Error(\"Ese cuadrante no esta soportado \" + cuadrante.toString());\r\n    }\r\n\r\n};"]}