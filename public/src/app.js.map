{"version":3,"sources":["00_config.js","00_loaders.js","01_EventoDummy.js","AJugador.js","Animador.js","Cohete.js","GameEngine.js","GameEngineDataIni.js","JugadorLocal.js","JugadorRemoto.js","Posicion.js","PosicionRC.js","ResultadoOpe.js","Submarino.js","z_app.js","Draw/DrawEtapaSeleccionarPosicion.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/* @flow */\r\n\r\nconst gameConfig = {\r\n    size: 800,\r\n    deltaSep: 30,\r\n    numSubmarinos: 3,\r\n    numDivisiones: 5,\r\n    wDivision:2,\r\n    resources: {\r\n        imgMar: null\r\n    }\r\n};\r\n","\r\nfunction loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image();\r\n        image.addEventListener('load', () => {\r\n            resolve(image)\r\n        });\r\n\r\n        image.src = url;\r\n    })\r\n}\r\n\r\n\r\n\r\nfunction loadBGMar(){\r\n    return loadImage('/img/mar1.png')\r\n}","//@flow\r\n\r\nlet EventoDummy = {\r\n\r\n    addJugador2:function(){\r\n        let j= factoryJugador.\r\n        gameEngine.addJugador( j);\r\n    }\r\n};","/* @flow*/\r\nclass AJugador {\r\n\r\n    constructor(indexCuadrante) {\r\n        this.indexCuadrante = indexCuadrante;\r\n        this.id = parseInt(Math.random() * 100000);\r\n        this.isPosicionConfirmada = false;\r\n\r\n        this.getIsLocal = () => {\r\n            return indexCuadrante === 0;\r\n        };\r\n\r\n        this.listaAtaquesRecibidos = [];\r\n        this.listaCohetes = [];\r\n\r\n    }\r\n\r\n\r\n    setPosicionConfirmada() {\r\n        this.isPosicionConfirmada = true;\r\n    }\r\n\r\n    getListaCohetes(): Array<Cohete> {\r\n        return this.listaCohetes;\r\n    }\r\n}","function animador(){\r\n    let ctx=gameLoader.ctx;\r\n\r\n    ctx.fillRect(0,0,20,20)\r\n}\r\n","class Cohete {\r\n\r\n    constructor(posicionIni) {\r\n        this.posicionIni = posicionIni;\r\n        this.estado = 'ready';\r\n        this.velocidad = new Posicion(0, 0, 0);\r\n        this.posicion = null;\r\n    }\r\n\r\n    getIsEstadoReady() {\r\n        return this.estado ==='ready';\r\n    }\r\n\r\n    getIsEstadoLanzado() {\r\n        return this.estado ==='lanzado';\r\n    }\r\n\r\n    lanzar(posicionFinalRC, posicionFinal) {\r\n        this.estado='lanzado';\r\n        this.posicionFinal = posicionFinal;\r\n        this.posicionFinalRC = posicionFinalRC;\r\n    }\r\n\r\n    mover() {\r\n\r\n    }\r\n\r\n}","/* @flow */\r\n\r\nclass GameEngine  {\r\n\r\n    constructor(ctx, tokenRoom, jugadorLocal) {\r\n\r\n        this.ctx = ctx;\r\n        this.tokenRoom = tokenRoom;\r\n        this.jugadorLocal=jugadorLocal;\r\n\r\n        this.listaJugadores = [jugadorLocal];\r\n    }\r\n\r\n    addJugador(jugador) {\r\n        this.listaJugadores.push(jugador);\r\n    }\r\n\r\n    runEtapaSeleccionarPosicion() {\r\n        const ctx=this.ctx;\r\n        drawEtapaSeleccionarPosicion.local(this.ctx, this.jugadorLocal);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n","class GameEngineDataIni {\r\n    constructor() {\r\n        this.size = null;\r\n        this.listaJugador=[];\r\n    }\r\n\r\n    setSize(size){\r\n        this.size=size;\r\n    }\r\n\r\n    addJugador(jugador){\r\n        this.listaJugador.push(jugador);\r\n    }\r\n\r\n    getResOpeIsValid(){\r\n        let isValid= true;\r\n        let listaMsg=[];\r\n\r\n        if(this.size===null){\r\n            isValid=false;\r\n            listaMsg.push('Size es null');\r\n        }\r\n\r\n        if(this.listaJugador.length<2){\r\n            isValid=false;\r\n            listaMsg.push('No hay jugadores suficientes');\r\n        }\r\n\r\n        if (isValid){\r\n            return FactoryResultadoOpe.OK();\r\n        }else{\r\n            return FactoryResultadoOpe.Error('Error de validacion', listaMsg);\r\n        }\r\n    }\r\n\r\n\r\n}","/* @flow */\r\nclass JugadorLocal extends AJugador {\r\n\r\n    constructor(listaSubmarinos) {\r\n        super(0);\r\n\r\n        this.listaSubmarinos = listaSubmarinos;\r\n\r\n        //asignar los submarinos al jugador actual\r\n        this.listaSubmarinos\r\n            .forEach(submarino => {\r\n                submarino.setJugador(this);\r\n            })\r\n        ;\r\n\r\n\r\n    }\r\n\r\n    getListaSubmarinos(){\r\n        return this.listaSubmarinos;\r\n    }\r\n\r\n    getNumSubmarinos() {\r\n        return this.listaSubmarinos\r\n            .filter(s => {\r\n                return s.isActivo;\r\n            }).length;\r\n    }\r\n\r\n    getNumCohetesReady() {\r\n        let numCoheteListo = this.getListaCohetes()\r\n            .filter(c => {\r\n                return c.getIsEstadoReady();\r\n            })\r\n            .length;\r\n\r\n        return numCoheteListo;\r\n    }\r\n\r\n}\r\n\r\n\r\nconst factoryJugador = {\r\n    local: function () {\r\n        let listaSubmarinos = factoryListaSubmarinos.random();\r\n        return new JugadorLocal( listaSubmarinos);\r\n    },\r\n    remoto: function (index) {\r\n\r\n        if (index === 0) {\r\n            throw new Error(\"No se puede poner index 0 a jugador remoto\");\r\n        }\r\n        return new JugadorRemoto(index);\r\n    }\r\n};","class JugadorRemoto extends AJugador{\r\n\r\n    constructor(indexCuadrante) {\r\n\r\n        super(indexCuadrante);\r\n\r\n        this.numSubmarinos= gameConfig.numSubmarinos;\r\n\r\n    }\r\n\r\n    getNumSubmarinos(){\r\n        return this.numSubmarinos;\r\n    }\r\n}","/* @flow */\r\n\r\nclass Posicion {\r\n\r\n    constructor(x, y, z=0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n}","class PosicionRC {\r\n\r\n    constructor(r, c) {\r\n        this.r = r;\r\n        this.c = c;\r\n    }\r\n\r\n}","class ResultadoOpe {\r\n\r\n    constructor(isOk, msg, dataAdicional) {\r\n\r\n        this.getIsSuccess = function () {\r\n            return isOk;\r\n        };\r\n\r\n        this.getMsg = function () {\r\n            return msg;\r\n        };\r\n\r\n        this.getData = function () {\r\n            return dataAdicional;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nlet FactoryResultadoOpe = {\r\n    OK: function (data = null) {\r\n        return new ResultadoOpe(true, msg, data);\r\n    },\r\n    Error: function (msg, data = null) {\r\n        return new ResultadoOpe(false, msg, data);\r\n    }\r\n\r\n};","//@flow\r\n\r\nclass Submarino {\r\n\r\n    constructor(posicionRC) {\r\n        this.posicionRC = posicionRC;\r\n        this.isActivo = true;\r\n        this.isCoheteListo = false;\r\n        this.jugador = null;\r\n        this.isSetJugador = false;\r\n    }\r\n\r\n    setJugador(jugador) {\r\n        this.jugador = jugador;\r\n        this.isSetJugador = true;\r\n    }\r\n\r\n    getPosicionRC(): PosicionRC {\r\n        return this.posicionRC;\r\n    }\r\n\r\n    recibeImpacto() {\r\n        this.isActivo = false;\r\n        this.isCoheteListo = false;\r\n    }\r\n\r\n    lanzaCohete(fnCB) {\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst factoryListaSubmarinos = {\r\n\r\n    random: function () {\r\n\r\n        let lista = [];\r\n\r\n\r\n        while (lista.length < gameConfig.numSubmarinos) {\r\n            //agregar submarino\r\n\r\n            let r = 1 + Math.floor(Math.random() * gameConfig.numDivisiones);\r\n            let c = 1 + Math.floor(Math.random() * gameConfig.numDivisiones);\r\n\r\n            //buscar si se repiten\r\n\r\n            let numCoincidencias = lista\r\n                .filter(item => {\r\n                    return item.posicionRC.r === r && item.posicionRC.c === c;\r\n                })\r\n                .length\r\n            ;\r\n\r\n            if (numCoincidencias === 0) {\r\n\r\n                let posicionRC = new PosicionRC(r, c);\r\n                let submarino = new Submarino(posicionRC);\r\n                lista.push(submarino);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return lista;\r\n    }\r\n};\r\n","\r\n'use strict';\r\n\r\nlet gameEngine=null;\r\n\r\nlet gameLoader = {\r\n\r\n    canvas: null,\r\n    ctx: null,\r\n    start: function (tokenRoom) {\r\n\r\n        if (this.isTerminado) {\r\n            throw new Error(\"El loader ha termiando\")\r\n        }\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = gameConfig.size;\r\n        this.canvas.height = gameConfig.size;\r\n\r\n        let container = document.getElementById('container');\r\n        container.append(this.canvas);\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        Promise.all([\r\n                loadBGMar()\r\n            ]\r\n        ).then(([imgMar]) => {\r\n            //guardar los archivos cargados\r\n            gameConfig.resources.imgMar = imgMar;\r\n            this.confirmarPosiciones(tokenRoom);\r\n        });\r\n\r\n    },\r\n    confirmarPosiciones:function(tokenRoom){\r\n\r\n        let jugadorLocal=factoryJugador.local();\r\n\r\n        gameEngine=new GameEngine( this.ctx, tokenRoom, jugadorLocal);\r\n\r\n        gameEngine.runEtapaSeleccionarPosicion();\r\n\r\n    }\r\n\r\n};","/*@flow*/\r\n\r\nconst drawEtapaSeleccionarPosicion = {\r\n\r\n    drawSubmarino: function (ctx,submarino: Submarino) {\r\n\r\n        const sizeRegion = gameConfig.size / 3;\r\n        const origen = getOriginFromIndex(submarino.jugador.indexCuadrante);\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        const sizeMar = sizeRegion - 2 * delta;\r\n\r\n        const origenMar = new Posicion(origen.x + delta, origen.y + delta);\r\n\r\n        const sizeCM = (sizeMar - gameConfig.numDivisiones * gameConfig.wDivision) / gameConfig.numDivisiones;\r\n\r\n        console.log(submarino.getPosicionRC());\r\n\r\n        const x = origenMar.x + (submarino.getPosicionRC().r-1) * (sizeCM + gameConfig.wDivision);\r\n        const y = origenMar.y + (submarino.getPosicionRC().c-1 )* (sizeCM + gameConfig.wDivision);\r\n\r\n        ctx.fillRect(x,y, sizeCM/2, sizeCM/2);\r\n\r\n\r\n    },\r\n    local: function (ctx, jugador: JugadorLocal) {\r\n        const sizeRegion = gameConfig.size / 3;\r\n        const delta = gameConfig.deltaSep;\r\n\r\n\r\n        let cacheRegionConMar = this.getCacheCanvasRegionConMar(jugador);\r\n\r\n        let origen = getOriginFromIndex(jugador.indexCuadrante);\r\n\r\n\r\n        /* draw el cache  */\r\n        ctx.drawImage(cacheRegionConMar, 0, 0, sizeRegion, sizeRegion, origen.x, origen.y, sizeRegion, sizeRegion);\r\n\r\n        //ctxCache.fillText('COHETES LISTOS', delta + 24, sizeMar + delta + 18);\r\n\r\n        /* actualziar dra numero coehtes*/\r\n        // let numCoheteListo = jugador.getNumCohetesReady();\r\n        //\r\n        // ctx.font = '20px monospace';\r\n        // ctx.fillStyle = \"rgba(0, 255, 0, 1)\";\r\n        // ctx.fillText(numCoheteListo.toString(), origenMar.x, origenMar.y + sizeMar + 18);\r\n\r\n\r\n        /* actualziar dra numero sub*/\r\n        let numSubmarino = jugador.getNumSubmarinos();\r\n        ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n        ctx.font = '20px monospace';\r\n        ctx.fillText(numSubmarino.toString(), origen.x + sizeRegion - delta - 20, origen.y + delta - 6);\r\n\r\n\r\n        jugador.getListaSubmarinos().forEach(s => {\r\n            this.drawSubmarino(ctx,s);\r\n        });\r\n\r\n\r\n    },\r\n\r\n    cacheCanvasRegionConMar: null,\r\n\r\n    getCacheCanvasRegionConMar: function (jugador: JugadorLocal) {\r\n\r\n        if (this.cacheCanvasRegionConMar !== null) {\r\n            return this.cacheCanvasRegionConMar;\r\n        }\r\n\r\n        const sizeRegion = gameConfig.size / 3;\r\n        const delta = gameConfig.deltaSep;\r\n\r\n\r\n        const cacheRegionConMar = document.createElement('canvas');\r\n        cacheRegionConMar.width = sizeRegion;\r\n        cacheRegionConMar.height = sizeRegion;\r\n\r\n        const ctxCache = cacheRegionConMar.getContext('2d');\r\n\r\n        //el decorado de la region\r\n        const origen = getOriginFromIndex(jugador.indexCuadrante);\r\n        ctxCache.fillRect(0, 0, sizeRegion, sizeRegion);\r\n\r\n        //la seccion de mar\r\n        const sizeMar = sizeRegion - 2 * delta;\r\n        ctxCache.drawImage(gameConfig.resources.imgMar, 0, 0, sizeMar, sizeMar, delta, delta, sizeMar, sizeMar);\r\n\r\n        //las divisiones\r\n        const sizeDiv = (sizeRegion - (gameConfig.wDivision * gameConfig.numDivisiones)) / gameConfig.numDivisiones;\r\n        const rayaSize = sizeRegion - 2 * delta;\r\n\r\n        const sizeCM = (sizeMar - gameConfig.numDivisiones * gameConfig.wDivision) / gameConfig.numDivisiones;\r\n\r\n\r\n        ctxCache.fillStyle = \"rgba(255, 255, 255, 0.7)\";\r\n\r\n        for (let i = 1; i < gameConfig.numDivisiones; i++) {\r\n            ctxCache.fillRect(i * (sizeCM + gameConfig.wDivision) + delta, delta, gameConfig.wDivision, rayaSize);\r\n            ctxCache.fillRect(delta, i * (sizeCM + gameConfig.wDivision) + delta, rayaSize, gameConfig.wDivision);\r\n        }\r\n\r\n        /* el cache de texto */\r\n        ctxCache.font = '20px monospace';\r\n        ctxCache.fillStyle = \"rgba(200, 200, 200, 0.7)\";\r\n        ctxCache.fillText('SUBMARINOS', delta + 70, 24);\r\n\r\n        this.cacheCanvasRegionConMar = cacheRegionConMar;\r\n\r\n        return cacheRegionConMar;\r\n\r\n    }\r\n};\r\n\r\n\r\nfunction getOriginFromIndex(index): Posicion {\r\n    const size = gameConfig.size;\r\n    const delta = gameConfig.deltaSep;\r\n\r\n    if (index === 0) {\r\n        return new Posicion(size * .33, size * .33, 0)\r\n    } else {\r\n        throw new Error(\"No tenemos eseIndex de jugador\");\r\n    }\r\n\r\n}"]}