{"version":3,"sources":["00_config.js","00_loaders.js","01_EventoDummy.js","AEngine.js","AJugador.js","Cohete.js","JugadorLocal.js","JugadorRemoto.js","ResultadoOpe.js","Submarino.js","z_app.js","01EtapaSelPos/DrawSelPos.js","01EtapaSelPos/EngineSelPos.js","Posicion/Posicion.js","Posicion/PosicionRC.js","Posicion/PosicionRCCuadrante.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbvnnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdfile":"app.js","sourcesContent":["/* @flow */\r\n\r\nconst gameConfig = {\r\n    size: 900,\r\n    deltaSep: 20,\r\n    numSubmarinos: 8,\r\n    numDivisiones: 6,\r\n    wDivision: 2,\r\n    resources: {\r\n        imgMar: null\r\n    }\r\n};\r\n\r\nconst gameCacheSize = {\r\n    sizeRegion: null,\r\n    getSizeRegion: function () {\r\n        if (this.sizeRegion !== null) {\r\n            return this.sizeRegion;\r\n        }\r\n\r\n        this.sizeRegion = gameConfig.size / 3;\r\n        return this.sizeRegion;\r\n    },\r\n\r\n    sizeMar: null,\r\n    getSizeMar: function () {\r\n        if (this.sizeMar !== null) {\r\n            return this.sizeMar;\r\n        }\r\n        const delta = gameConfig.deltaSep;\r\n        this.sizeMar = this.getSizeRegion() - 2 * delta;\r\n        return this.sizeMar;\r\n    },\r\n    sizeCM: null,\r\n    getSizeCM: function () {\r\n\r\n        if (this.sizeCM !== null) {\r\n            return this.sizeCM;\r\n        }\r\n\r\n        const s = this.getSizeMar();\r\n        const w = gameConfig.wDivision;\r\n\r\n        this.sizeCM = (s - (gameConfig.numDivisiones - 1) * w) / gameConfig.numDivisiones;\r\n        return this.sizeCM;\r\n    }\r\n};\r\n\r\n\r\nfunction IDGenerator() {\r\n\r\n    let length = 8;\r\n    let timestamp = new Date;\r\n\r\n    let _getRandomInt = function( min, max ) {\r\n        return Math.floor( Math.random() * ( max - min + 1 ) ) + min;\r\n    };\r\n\r\n    let ts = timestamp.toString();\r\n    let parts = ts.split( \"\" ).reverse();\r\n    let id = \"\";\r\n\r\n    for( let i = 0; i < length; ++i ) {\r\n        let index = _getRandomInt( 0, parts.length - 1 );\r\n        id += parts[index];\r\n    }\r\n\r\n    return id;\r\n\r\n\r\n}\r\n","\r\nfunction loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image();\r\n        image.addEventListener('load', () => {\r\n            resolve(image)\r\n        });\r\n\r\n        image.src = url;\r\n    })\r\n}\r\n\r\n\r\n\r\nfunction loadBGMar(){\r\n    return loadImage('/img/mar1.png')\r\n}","//@flow\r\n\r\nlet EventoDummy = {\r\n\r\n    addJugador2:function(){\r\n        let j= factoryJugador.\r\n        gameEngine.addJugador( j);\r\n    }\r\n};","// @flow\r\n\r\nclass AEngine {\r\n\r\n    constructor(fnOnContinuar){\r\n\r\n        this.fnOnContinuar = fnOnContinuar;\r\n\r\n        this.isRunning = null;\r\n        this.canvas = gameData.canvas;\r\n        this.ctx = gameData.ctx;\r\n        this.tokenRoom = gameData.tokenRoom;\r\n        this.jugadorLocal = gameData.jugadorLocal;\r\n\r\n        this.mouseEstatus = null;\r\n    }\r\n\r\n    removeEventosMouseAndKeyBoard() {\r\n        let canvas = gameData.canvas;\r\n\r\n        canvas.onmousedown = (event) => {\r\n            console.log('no listenging');\r\n        };\r\n\r\n        canvas.onmouseup = (event) => {\r\n            console.log('no listenging');\r\n        };\r\n\r\n        canvas.onmousemove = (event) => {\r\n            console.log('no listenging');\r\n        };\r\n\r\n        document.onkeydown = (event) => {\r\n            console.log('no listenging');\r\n        };\r\n    }\r\n\r\n\r\n\r\n}","/* @flow*/\r\nclass AJugador {\r\n\r\n    constructor(indexCuadrante) {\r\n        this.indexCuadrante = indexCuadrante;\r\n        this.id = parseInt(Math.random() * 100000);\r\n        this.isPosicionConfirmada = false;\r\n\r\n        this.getIsLocal = () => {\r\n            return indexCuadrante === 0;\r\n        };\r\n\r\n        this.listaAtaquesRecibidos = [];\r\n        this.listaCohetes = [];\r\n\r\n    }\r\n\r\n\r\n    setPosicionConfirmada() {\r\n        this.isPosicionConfirmada = true;\r\n    }\r\n\r\n    getListaCohetes(): Array<Cohete> {\r\n        return this.listaCohetes;\r\n    }\r\n\r\n    getOrigenFromIndex(): Posicion {\r\n        const size = gameConfig.size;\r\n        const delta = gameConfig.deltaSep;\r\n\r\n\r\n        if (this.indexCuadrante === 0) {\r\n            return new Posicion(size * .33, size * .33, 0)\r\n        } else {\r\n            throw new Error(\"No tenemos eseIndex de jugador\");\r\n        }\r\n\r\n    }\r\n}","class Cohete {\r\n\r\n    constructor(posicionIni) {\r\n        this.posicionIni = posicionIni;\r\n        this.estado = 'ready';\r\n        this.velocidad = new Posicion(0, 0, 0);\r\n        this.posicion = null;\r\n    }\r\n\r\n    getIsEstadoReady() {\r\n        return this.estado ==='ready';\r\n    }\r\n\r\n    getIsEstadoLanzado() {\r\n        return this.estado ==='lanzado';\r\n    }\r\n\r\n    lanzar(posicionFinalRC, posicionFinal) {\r\n        this.estado='lanzado';\r\n        this.posicionFinal = posicionFinal;\r\n        this.posicionFinalRC = posicionFinalRC;\r\n    }\r\n\r\n    mover() {\r\n\r\n    }\r\n\r\n}","/* @flow */\r\nclass JugadorLocal extends AJugador {\r\n\r\n    constructor(listaSubmarinos) {\r\n        super(0);\r\n\r\n        this.listaSubmarinos = listaSubmarinos;\r\n\r\n        //asignar los submarinos al jugador actual\r\n        this.listaSubmarinos\r\n            .forEach(submarino => {\r\n                submarino.setJugador(this);\r\n            })\r\n        ;\r\n\r\n\r\n    }\r\n\r\n    getListaSubmarinos(){\r\n        return this.listaSubmarinos;\r\n    }\r\n\r\n    getNumSubmarinos() {\r\n        return this.listaSubmarinos\r\n            .filter(s => {\r\n                return s.isActivo;\r\n            }).length;\r\n    }\r\n\r\n    getNumCohetesReady() {\r\n        let numCoheteListo = this.getListaCohetes()\r\n            .filter(c => {\r\n                return c.getIsEstadoReady();\r\n            })\r\n            .length;\r\n\r\n        return numCoheteListo;\r\n    }\r\n\r\n}\r\n\r\n\r\nconst factoryJugador = {\r\n    local: function () {\r\n        let listaSubmarinos = factoryListaSubmarinos.random();\r\n        return new JugadorLocal( listaSubmarinos);\r\n    },\r\n    remoto: function (index) {\r\n\r\n        if (index === 0) {\r\n            throw new Error(\"No se puede poner index 0 a jugador remoto\");\r\n        }\r\n        return new JugadorRemoto(index);\r\n    }\r\n};","class JugadorRemoto extends AJugador{\r\n\r\n    constructor(indexCuadrante) {\r\n\r\n        super(indexCuadrante);\r\n\r\n        this.numSubmarinos= gameConfig.numSubmarinos;\r\n\r\n    }\r\n\r\n    getNumSubmarinos(){\r\n        return this.numSubmarinos;\r\n    }\r\n}","class ResultadoOpe {\r\n\r\n    constructor(isOk, msg, dataAdicional) {\r\n\r\n        this.getIsSuccess = function () {\r\n            return isOk;\r\n        };\r\n\r\n        this.getMsg = function () {\r\n            return msg;\r\n        };\r\n\r\n        this.getData = function () {\r\n            return dataAdicional;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nlet FactoryResultadoOpe = {\r\n    OK: function (data = null) {\r\n        return new ResultadoOpe(true, msg, data);\r\n    },\r\n    Error: function (msg, data = null) {\r\n        return new ResultadoOpe(false, msg, data);\r\n    }\r\n\r\n};","//@flow\r\n\r\nclass Submarino {\r\n\r\n    constructor(posicionRC) {\r\n\r\n        this.id=IDGenerator();\r\n        this.isOnDrag=false;\r\n        this.posicionRC = posicionRC;\r\n        this.isActivo = true;\r\n        this.isCoheteListo = false;\r\n        this.jugador = null;\r\n        this.isSetJugador = false;\r\n    }\r\n\r\n    setJugador(jugador) {\r\n        this.jugador = jugador;\r\n        this.isSetJugador = true;\r\n    }\r\n\r\n    getPosicionRC(): PosicionRC {\r\n        return this.posicionRC;\r\n    }\r\n\r\n    recibeImpacto() {\r\n        this.isActivo = false;\r\n        this.isCoheteListo = false;\r\n    }\r\n\r\n\r\n    lanzaCohete(fnCB) {\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst factoryListaSubmarinos = {\r\n\r\n    random: function () {\r\n\r\n        let lista = [];\r\n\r\n\r\n        while (lista.length < gameConfig.numSubmarinos) {\r\n            //agregar submarino\r\n\r\n\r\n            let r = 1 + Math.floor(Math.random() * (gameConfig.numDivisiones));\r\n            let c = 1 + Math.floor(Math.random() * (gameConfig.numDivisiones));\r\n\r\n            //buscar si se repiten\r\n\r\n            let numCoincidencias = lista\r\n                .filter(item => {\r\n                    return item.posicionRC.r === r && item.posicionRC.c === c;\r\n                })\r\n                .length\r\n            ;\r\n\r\n            if (numCoincidencias === 0) {\r\n\r\n                let posicionRC = new PosicionRC(r, c);\r\n                let submarino = new Submarino(posicionRC);\r\n                lista.push(submarino);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        return lista;\r\n    }\r\n};\r\n","'use strict';\r\n\r\nlet engineSelPos = null;\r\n\r\nlet gameData = {\r\n    tokenRoom:null,\r\n    canvas: null,\r\n    ctx: null,\r\n    jugadorLocal: [],\r\n    listaJugadores:[],\r\n    listaCohetes:[],\r\n    listaMsgSocket:[]\r\n};\r\n\r\nlet gameController = {\r\n\r\n    start: async function (tokenRoom) {\r\n\r\n        gameData.canvas = document.createElement('canvas');\r\n        gameData.canvas.width = gameConfig.size;\r\n        gameData.canvas.height = gameConfig.size;\r\n\r\n        let container = document.getElementById('container');\r\n        container.append(gameData.canvas);\r\n        gameData.ctx = gameData.canvas.getContext('2d');\r\n\r\n        Promise.all([\r\n                loadBGMar()\r\n            ]\r\n        ).then(([imgMar]) => {\r\n            //guardar los archivos cargados\r\n            gameConfig.resources.imgMar = imgMar;\r\n\r\n            this.runConfirmarPosiciones(tokenRoom);\r\n        });\r\n\r\n    },\r\n    runConfirmarPosiciones:  function (tokenRoom) {\r\n\r\n        gameData.tokenRoom = tokenRoom;\r\n        gameData.jugadorLocal = factoryJugador.local();\r\n\r\n\r\n        let fnOnConfirmar= ()=>{\r\n            gameController.runEsperarParticipantes();\r\n        };\r\n\r\n        engineSelPos = new EngineSelPos(fnOnConfirmar);\r\n        engineSelPos.run();\r\n\r\n    },\r\n    runEsperarParticipantes:function(){\r\n        console.log('esperando');\r\n    }\r\n\r\n};","/*@flow*/\r\n\r\nconst drawSelPos = {\r\n\r\n    drawSubmarino: function (ctx, submarino: Submarino) {\r\n\r\n        const origen = submarino.jugador.getOrigenFromIndex();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        const origenMar = new Posicion(origen.x + delta, origen.y + delta);\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n\r\n        const x = origenMar.x + (submarino.getPosicionRC().c - 1) * (sizeCM + gameConfig.wDivision);\r\n        const y = origenMar.y + (submarino.getPosicionRC().r - 1) * (sizeCM + gameConfig.wDivision);\r\n\r\n        //se dibuja diferente si esta en drag\r\n        if( submarino.isOnDrag){\r\n            ctx.fillStyle = \"rgba(100, 100, 100, 0.5)\";\r\n        }else{\r\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.9)\";\r\n        }\r\n\r\n        let submarinoSize=sizeCM / 2;\r\n        let dy=sizeCM/4;\r\n\r\n        ctx.fillRect(x +dy, y +sizeCM/4,submarinoSize , submarinoSize);\r\n    },\r\n    drawDragSubmarino(ctx,posicionRCC: PosicionRCCuadrante){\r\n\r\n        const origen =factoryPosicionRCCuadrante.getOrigenCuadrante( posicionRCC.getIndexCuadrante());\r\n\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        const origenMar = new Posicion(origen.x + delta, origen.y + delta);\r\n        const sizeCM = gameCacheSize.getSizeCM();\r\n\r\n        const x = origenMar.x + (posicionRCC.getC() - 1) * (sizeCM + gameConfig.wDivision);\r\n        const y = origenMar.y + (posicionRCC.getR() - 1) * (sizeCM + gameConfig.wDivision);\r\n\r\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\r\n        let submarinoSize=sizeCM / 2;\r\n        ctx.fillRect(x +sizeCM/4, y +sizeCM/4,submarinoSize , submarinoSize);\r\n\r\n\r\n    },\r\n\r\n    local: function (ctx, jugador: JugadorLocal) {\r\n        const sizeRegion = gameConfig.size / 3;\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        let cacheRegionConMar = this.getCacheCanvasRegionConMar(jugador);\r\n\r\n        let origen = jugador.getOrigenFromIndex();\r\n\r\n\r\n        /* draw el cache  */\r\n        ctx.drawImage(cacheRegionConMar, 0, 0, sizeRegion, sizeRegion, origen.x, origen.y, sizeRegion, sizeRegion);\r\n\r\n        //ctxCache.fillText('COHETES LISTOS', delta + 24, sizeMar + delta + 18);\r\n\r\n        /* actualziar dra numero coehtes*/\r\n        // let numCoheteListo = jugador.getNumCohetesReady();\r\n        //\r\n        // ctx.font = '20px monospace';\r\n        // ctx.fillStyle = \"rgba(0, 255, 0, 1)\";\r\n        // ctx.fillText(numCoheteListo.toString(), origenMar.x, origenMar.y + sizeMar + 18);\r\n\r\n\r\n        /* actualziar dra numero sub*/\r\n        let numSubmarino = jugador.getNumSubmarinos();\r\n        ctx.fillStyle = \"rgba(255, 255, 0, 1)\";\r\n        ctx.font = '19px monospace';\r\n        ctx.fillText(numSubmarino.toString(), origen.x + sizeRegion - delta - 20, origen.y + delta - 4);\r\n\r\n\r\n\r\n        let sizeTexto=470;\r\n        let dx= ( (sizeRegion *3) - sizeTexto )/2;\r\n        ctx.fillStyle = \"rgba(255, 255, 255, 1)\";\r\n        ctx.fillText('Arrastra los submarinos a la posición deseada', dx, sizeRegion*2+50);\r\n        ctx.fillText('Presiona Enter para continuar', dx +80, sizeRegion*2+100);\r\n\r\n\r\n        jugador.getListaSubmarinos().forEach(s => {\r\n            this.drawSubmarino(ctx, s);\r\n        });\r\n\r\n    },\r\n    cacheCanvasRegionConMar: null,\r\n    getCacheCanvasRegionConMar: function (jugador: JugadorLocal) {\r\n\r\n        if (this.cacheCanvasRegionConMar !== null) {\r\n            return this.cacheCanvasRegionConMar;\r\n        }\r\n\r\n        const sizeRegion = gameConfig.size / 3;\r\n        const delta = gameConfig.deltaSep;\r\n\r\n\r\n        const cacheRegionConMar = document.createElement('canvas');\r\n        cacheRegionConMar.width = sizeRegion;\r\n        cacheRegionConMar.height = sizeRegion;\r\n\r\n        const ctxCache = cacheRegionConMar.getContext('2d');\r\n\r\n        //el decorado de la region\r\n        const origen = jugador.getOrigenFromIndex();\r\n        ctxCache.fillRect(0, 0, sizeRegion, sizeRegion);\r\n\r\n        //la seccion de mar\r\n        const sizeMar = sizeRegion - 2 * delta;\r\n        ctxCache.drawImage(gameConfig.resources.imgMar, 0, 0, sizeMar, sizeMar, delta, delta, sizeMar, sizeMar);\r\n\r\n        //las divisiones\r\n        const sizeDiv = (sizeRegion - (gameConfig.wDivision * gameConfig.numDivisiones)) / gameConfig.numDivisiones;\r\n        const rayaSize = sizeRegion - 2 * delta;\r\n\r\n        const sizeCM = (sizeMar - gameConfig.numDivisiones * gameConfig.wDivision) / gameConfig.numDivisiones;\r\n\r\n\r\n        ctxCache.fillStyle = \"rgba(255, 255, 255, 0.7)\";\r\n\r\n        for (let i = 1; i < gameConfig.numDivisiones; i++) {\r\n            ctxCache.fillRect(i * (sizeCM + gameConfig.wDivision) + delta, delta, gameConfig.wDivision, rayaSize);\r\n            ctxCache.fillRect(delta, i * (sizeCM + gameConfig.wDivision) + delta, rayaSize, gameConfig.wDivision);\r\n        }\r\n\r\n        /* el cache de texto */\r\n        ctxCache.font = '19px monospace';\r\n        ctxCache.fillStyle = \"rgba(200, 200, 200, 0.7)\";\r\n        ctxCache.fillText('SUBMARINOS', sizeMar - 112, 16);\r\n\r\n        this.cacheCanvasRegionConMar = cacheRegionConMar;\r\n\r\n        return cacheRegionConMar;\r\n\r\n    },\r\n    onClickCanvas(x: number, y: number) :void {\r\n\r\n\r\n    },\r\n    onMouseHoverCanvas(x,y):void{\r\n        console.log(`${x},${y}`);\r\n    }\r\n};\r\n\r\n\r\n","/* @flow */\r\n\r\nclass EngineSelPos extends AEngine {\r\n\r\n    constructor(fnOnContinuar) {\r\n\r\n        super(fnOnContinuar);\r\n\r\n        this.posicionOnDrag = null;\r\n        this.submarinoOnDrag = null;\r\n        this.mouseEstatus = null;\r\n\r\n        this.addEventosMouseAndKeyboard(\r\n            this.onMouseDown,\r\n            this.onMouseUp,\r\n            this.onMouseMove,\r\n            this.onKeyDow\r\n        );\r\n\r\n    }\r\n\r\n    run() {\r\n        const ctx = this.ctx;\r\n        const jugador = this.jugadorLocal;\r\n\r\n        this.mouseEstatus = 'select';\r\n        this.isRunning = true;\r\n\r\n        const frames = () => {\r\n\r\n            drawSelPos.local(ctx, jugador);\r\n\r\n\r\n            if (this.posicionOnDrag !== null) {\r\n                let p = this.posicionOnDrag;\r\n                drawSelPos.drawDragSubmarino(ctx, p);\r\n            }\r\n\r\n            if (this.isRunning) {\r\n                window.requestAnimationFrame(frames);\r\n            }\r\n\r\n\r\n        };\r\n\r\n        frames();\r\n\r\n    }\r\n\r\n    addEventosMouseAndKeyboard() {\r\n\r\n        let canvas = gameData.canvas;\r\n\r\n        canvas.onmousedown = (event) => {\r\n            this.onMouseDown(event);\r\n        };\r\n\r\n        canvas.onmouseup = (event) => {\r\n            this.onMouseUp(event);\r\n        };\r\n\r\n        canvas.onmousemove = (event) => {\r\n            this.onMouseMove(event);\r\n        };\r\n\r\n        document.onkeydown = (event) => {\r\n            this.onKeyDow(event);\r\n        };\r\n    }\r\n\r\n    onMouseDown(event) {\r\n\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n        if (posicionRCCuadrante === null) {\r\n            return;\r\n        }\r\n\r\n        if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n            return;\r\n        }\r\n\r\n        let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n        if (!sub) {\r\n            return;\r\n        }\r\n\r\n        this.submarinoOnDrag = sub;\r\n\r\n        this.mouseEstatus = 'arrastrando';\r\n        // this.canvas.style.cursor = 'move';\r\n\r\n        //actualizar esttado de subarino para ponerlo como drag\r\n\r\n        let idSub = sub.id;\r\n        this.jugadorLocal.getListaSubmarinos()\r\n            .forEach(s => {\r\n                s.isOnDrag = s.id === idSub;\r\n            });\r\n\r\n\r\n        //guardar la posicion\r\n        this.posicionOnDrag = posicionRCCuadrante;\r\n\r\n    }\r\n\r\n    onMouseUp(event) {\r\n\r\n        if (this.mouseEstatus !== 'arrastrando') {\r\n            return;\r\n        }\r\n\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n\r\n        if (posicionRCCuadrante === null) {\r\n            this.mouseEstatus = 'select';\r\n            return;\r\n        }\r\n\r\n        if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n            this.mouseEstatus = 'select';\r\n            return;\r\n        }\r\n\r\n        this.submarinoOnDrag.getPosicionRC().c = posicionRCCuadrante.getC();\r\n        this.submarinoOnDrag.getPosicionRC().r = posicionRCCuadrante.getR();\r\n        this.submarinoOnDrag.isOnDrag = false;\r\n\r\n        this.submarinoOnDrag = null;\r\n        this.posicionOnDrag = null;\r\n\r\n        this.mouseEstatus = 'select';\r\n        this.canvas.style.cursor = 'pointer';\r\n    }\r\n\r\n    onMouseMove(event) {\r\n\r\n        let posicionRCCuadrante = factoryPosicionRCCuadrante.fromEventMouse(event);\r\n\r\n\r\n        if (this.mouseEstatus === 'select') {\r\n\r\n            this.canvas.style.cursor = 'default';\r\n\r\n            //paso 1 encontrar si es una celda de region jugador\r\n\r\n            if (posicionRCCuadrante === null) {\r\n                return;\r\n            }\r\n\r\n            if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n                return;\r\n            }\r\n\r\n\r\n            let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n\r\n            if (!sub) {\r\n                //no hay submarino\r\n                return;\r\n            }\r\n\r\n\r\n            this.canvas.style.cursor = 'pointer';\r\n\r\n        }\r\n\r\n        if (this.mouseEstatus === 'arrastrando') {\r\n\r\n            // this.canvas.style.cursor = 'move';\r\n\r\n            if (posicionRCCuadrante === null) {\r\n                this.mouseEstatus = 'select';\r\n                this.submarinoOnDrag.isOnDrag = false;\r\n                this.posicionOnDrag = null;\r\n                return;\r\n            }\r\n\r\n            if (posicionRCCuadrante.getIndexCuadrante() !== 0) {\r\n                this.mouseEstatus = 'select';\r\n                this.submarinoOnDrag.isOnDrag = false;\r\n                this.posicionOnDrag = null;\r\n                return;\r\n\r\n            }\r\n\r\n            let sub = this.getSubFromPos(posicionRCCuadrante);\r\n\r\n\r\n            if (sub) {\r\n                //si hay un submarino no lo podemos poenr\r\n                return;\r\n            }\r\n\r\n            this.posicionOnDrag = posicionRCCuadrante;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    onKeyDow(event) {\r\n\r\n        if (event.code !== \"Enter\") {\r\n            return;\r\n        }\r\n\r\n        this.removeEventosMouseAndKeyBoard();\r\n        this.isRunning = false;\r\n        this.fnOnContinuar();\r\n\r\n    }\r\n\r\n    getSubFromPos(posicionRCCuadrante) {\r\n        let sub = this.jugadorLocal.getListaSubmarinos()\r\n            .find(s => {\r\n                return s.getPosicionRC().r === posicionRCCuadrante.getR() &&\r\n                    s.getPosicionRC().c === posicionRCCuadrante.getC();\r\n            });\r\n        return sub;\r\n    }\r\n}\r\n\r\n","/* @flow */\r\n\r\nclass Posicion {\r\n\r\n    constructor(x, y, z=0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n    toString(){\r\n        return `${this.x}, ${this.y}`;\r\n    }\r\n\r\n}","class PosicionRC {\r\n\r\n    constructor(r, c) {\r\n        this.r = r;\r\n        this.c = c;\r\n    }\r\n\r\n    toString(){\r\n        return `c:${this.c},r:${this.r}`;\r\n    }\r\n}","class PosicionRCCuadrante {\r\n\r\n    constructor(indexCuadrante: number, posicionRC: PosicionRC) {\r\n        this.indexCuadrante = indexCuadrante;\r\n        this.posicionRC = posicionRC;\r\n    }\r\n\r\n    getIndexCuadrante() {\r\n        return this.indexCuadrante;\r\n    }\r\n\r\n    getR() {\r\n        return this.posicionRC.r;\r\n    }\r\n\r\n    getC() {\r\n        return this.posicionRC.c;\r\n    }\r\n\r\n    toString() {\r\n        return `cuad:${this.indexCuadrante} c:${this.posicionRC.c} r: ${this.posicionRC.r}`;\r\n    }\r\n}\r\n\r\nconst factoryPosicionRCCuadrante = {\r\n\r\n    fromEventMouse: function (event) {\r\n        const x = event.clientX;\r\n        const y = event.clientY;\r\n\r\n        return this.fromXY(x, y);\r\n    },\r\n    fromXY: function (x, y) {\r\n\r\n        //paso 1 determinar el cuadrante\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n        const delta = gameConfig.deltaSep;\r\n\r\n        function getPosicionCuadrante(valor) {\r\n            return Math.floor(valor / sizeRegion);\r\n        }\r\n\r\n        let cuadranteX = getPosicionCuadrante(x);\r\n        let cuadranteY = getPosicionCuadrante(y);\r\n\r\n        if (cuadranteY === 3 || cuadranteX === 3) {\r\n            return null;\r\n        }\r\n\r\n        let code = `${cuadranteX}-${cuadranteY}`;\r\n\r\n        let indexCuadrante = this.dicCuadranteIndex[code];\r\n\r\n        let origenCuadrante = this.getOrigenCuadrante(indexCuadrante);\r\n\r\n        //obtener rango del mar\r\n        let xMarIni = origenCuadrante.x + delta;\r\n        let xMarFin = xMarIni + gameCacheSize.getSizeMar();\r\n\r\n        let yMarIni = origenCuadrante.y + delta;\r\n        let yMarFin = yMarIni + gameCacheSize.getSizeMar();\r\n\r\n\r\n        if (x >= xMarIni && x <= xMarFin && y >= yMarIni && y <= yMarFin) {\r\n\r\n            //encontrar la posicion RC\r\n            let xRel = x - xMarIni;\r\n            let yRel = y - yMarIni;\r\n            let celda = gameCacheSize.getSizeCM() + gameConfig.wDivision;\r\n\r\n            let c = 1 + Math.floor(xRel / celda);\r\n            let r = 1 + Math.floor(yRel / celda);\r\n            let posicionRC = new PosicionRC(r, c);\r\n            return new PosicionRCCuadrante(indexCuadrante, posicionRC);\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    dicCuadranteIndex: {\r\n        '0-0': 5,\r\n        '0-1': 2,\r\n        '0-2': 7,\r\n        '1-0': 1,\r\n        '1-1': 0,\r\n        '1-2': 4,\r\n        '2-0': 6,\r\n        '2-1': 3,\r\n        '2-2': 8,\r\n    },\r\n    getOrigenCuadrante(cuadrante: number) {\r\n\r\n        const sizeRegion = gameCacheSize.getSizeRegion();\r\n\r\n        if (cuadrante === 5) {\r\n            return new Posicion(0, 0);\r\n        } else if (cuadrante === 1) {\r\n            return new Posicion(sizeRegion, 0);\r\n        } else if (cuadrante === 6) {\r\n            return new Posicion(sizeRegion * 2, 0);\r\n        }\r\n\r\n        if (cuadrante === 2) {\r\n            return new Posicion(0, sizeRegion);\r\n        } else if (cuadrante === 0) {\r\n            return new Posicion(sizeRegion, sizeRegion);\r\n        } else if (cuadrante === 3) {\r\n            return new Posicion(sizeRegion * 2, sizeRegion);\r\n        }\r\n\r\n\r\n        if (cuadrante === 7) {\r\n            return new Posicion(0, sizeRegion * 2);\r\n        } else if (cuadrante === 4) {\r\n            return new Posicion(sizeRegion, sizeRegion * 2);\r\n        } else if (cuadrante === 8) {\r\n            return new Posicion(sizeRegion * 2, sizeRegion * 2);\r\n        }\r\n\r\n        throw new Error(\"Ese cuadrante no esta soportado \" + cuadrante.toString());\r\n    }\r\n\r\n};"]}